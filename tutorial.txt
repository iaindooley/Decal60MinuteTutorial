Before starting:

Decal does a lot of things right and we use it in production for our own clients.

There are a number of things we need to do before other web developers can use it and the purpose of this tutorial is to find out if we're on the right track.

We'd like enough support to launch a Kickstarter campaign so we can fix these major flaws and launch for public use.

The biggest issues are:

 - Deployment via ZIP only
 - Editing interface in Firefox only
 - Image and embed placement is problematic
 - Caveats with what markup can be made editable
 - Limited inline formatting
 - Doctype is always HTML5 style
 - Cumbersome file manager
 - Project and interface CSS can interfere with each other
 - Serious lack of documentation!
 - API design issues
 - Hosting on all major continents
 - Using data-dcl prefixes on decal attributes
 - Reporting errors during deployment more clearly and explicitly disallowing markup or structures which cause errors (ie. making it less easy to break)

NB: More details on each of these points is included as an appendix at the end of the tutorial.

The goal for Decal is to allow you to deploy and edit completely arbitrary HTML. The current version has some limitations.

We plan on fixing those if we get enough support for the project.

For the sake of simplicity, we have created a sample HTML project for you to deploy.

Step 1: Hello World (the simplest possible site)

<html>
    <head>
        <title>Ohai</title>
    </head>
    <body>
        <div area="Main content" editable="true">
            <h1>Sample content is instructional</h1>
            <h2>This is what the user sees when they create a new page</h2>
            <p>You can also include images if you like:</p>
            <p><img src="http://dummy.mockups.decalcms.com/200x200" /></p>
        </div>
    </body>
</html>

Step 2: Adding some structure, tags and formatting

<html>
    <head>
        <title>Ohai</title>
    </head>
    <body>
        <div area="Main content" id="whatever">
            <h1 editable="true">This is where you type your content</h1>
            <p editable="true" tags="inline">This allows inline formatting only</p>
        </div>
    </body>
</html>

Step 3: Repeatable vs. fixed components and containers

<html>
    <head>
        <title>Ohai</title>
    </head>
    <body>
        <div area="Main content">
            <div component="Title content" id="whatever">
                <h1 editable="true">This is a fixed component because it has an id attribute</h1>
                <p editable="true" tags="inline">The user does not need to choose to add a main content area.</p>
                <p editable="true" tags="inline">If the user clicks the green arrow at the top right, and chooses to add a component after, they can add another div.</p>
            </div>
            <div component="Title content">
                <h1 editable="true">This component is repeatable because the containing div does not have an id attribute</h1>
                <p editable="true" tags="inline">It can be structured however you like</p>
                <br />
                <img editable="true" width="200" src="http://dummy.mockups.decalcms.com/200x200/" />
                <div editable="true">
                    <h3>The user can use any kind of formatting here</h3>
                </div>
                <div editable="true" tags="embed">
                    <p>Click here to embed some snippet of code (eg. a Wufoo form or YouTube video)</p>
                </div>
            </div>
        </div>
        <div area="Sub content">
            <div component="Sub content intro" id="something">
                <h2>This area allows more than one type of component</h2>
                <p>This first component is fixed, but unlike the previous area, if you click the green arrow at the top right, you'll be given the option to add one or more components.</p>
                <p>As you mouse over each in the menu, you will see the sample content appear in the document.</p>
            </div>
            <div component="Component type 1">
                <h2 editable="true" tags="none">This component has a heading</h2>
                <p editable="true" tags="inline">And some body text</p>
                <br />
                <img editable="true" width="200" src="http://dummy.mockups.decalcms.com/200x200/" />
                <br />
                <a editable="true" href="">This link is editable (but the text isn't)</a>
                <p>You can include non-editable markup in a component, too</p>
            </div>
            <div component="Component type 2">
                <h3 editable="true" tags="none">This component has a different heading and an image</h3>
                <br />
                <img editable="true" width="200" src="http://dummy.mockups.decalcms.com/200x200/" />
            </div>
        </div>
    </body>
</html>

Step 4: Custom classes and link styles

styles.css

p.specialParagraph /* decal: Red text */
{
    color:red;
    background:blue;
}

p.anotherType /* decal: Ugly paragraph */
{
    border:1px solid red;
    background:black;
    text:white;
}

a.linkTypeOne /* Red link text */
{
    color:red;
}

a.linkTypeTwo /* Green link text */
{
    color:green;
}

<html>
    <head>
        <title>Ohai</title>
        <link rel="stylesheet" type="text/css" href="styles.css" />
    </head>
    <body>
        <div area="Main content">
            <div component="Title content" id="whatever">
                <h1 editable="true">This is a fixed component because it has an id attribute</h1>
                <p editable="true" tags="inline">The user does not need to choose to add a main content area.</p>
                <p editable="true" tags="inline">If the user clicks the green arrow at the top right, and chooses to add a component after, they can add another div.</p>
            </div>
            <div component="Title content">
                <h1 editable="true">This component is repeatable because the containing div does not have an id attribute</h1>
                <p editable="true" tags="inline">It can be structured however you like</p>
                <br />
                <img editable="true" width="200" src="http://dummy.mockups.decalcms.com/200x200/" />
                <div editable="true">
                    <h3>The user can use any kind of formatting here</h3>
                </div>
                <div editable="true" tags="embed">
                    <p>Click here to embed some snippet of code (eg. a Wufoo form or YouTube video)</p>
                </div>
            </div>
        </div>
        <div area="Sub content">
            <div component="Sub content intro" id="something">
                <h2>This area allows more than one type of component</h2>
                <p>This first component is fixed, but unlike the previous area, if you click the green arrow at the top right, you'll be given the option to add one or more components.</p>
                <p>As you mouse over each in the menu, you will see the sample content appear in the document.</p>
            </div>
            <div component="Component type 1">
                <h2 editable="true" tags="none">This component has a heading</h2>
                <p editable="true" tags="inline">And some body text</p>
                <br />
                <img editable="true" width="200" src="http://dummy.mockups.decalcms.com/200x200/" />
                <br />
                <a editable="true" href="">This link is editable (but the text isn't)</a>
                <p>You can include non-editable markup in a component, too</p>
            </div>
            <div component="Component type 2">
                <h3 editable="true" tags="none">This component has a different heading and an image</h3>
                <br />
                <img editable="true" width="200" src="http://dummy.mockups.decalcms.com/200x200/" />
            </div>
        </div>
    </body>
</html>

Step 5: Images, embeds and the file manager

First look at this tutorial video:

http://iain.wistia.com/medias/98f883e24a

<html>
    <head>
        <title>My page</title>
    </head>
    <body>
        <div area="Main content" id="mainContent" editable="true">
            <h2>You can use any formatting here, including images and embeds</h2>
            <p>If you put in a bunch of content in here, then embed an image just like in the instructional video you'll see you can move it around.</p>
            <p>You can do the same thing with embeds.</p>
            <p>The one thing you should notice is that the dropping and placement of images is a bit cumbersome. Although you can drag images around and position them when you release the mouse it's not always ending up in the correct spot.</p>
            <p>This is because, unlike other WYSIWYG editors, Decal doesn't use hard coded inline styles to allow you to place images wherever you like. This is technically better, but makes for a lousy user experience when editing the page.</p>
        </div>
        <div area="Image content" id="imageContent">
            <h2>If you create a more structured format</h2>
            <p>You can use editable images to make the user experience much simpler, and the design of the site much more difficult to break.</p>
            <p><img editable="true" width="400" src="http://dummy.mockups.decalcms.com/400x200?text=Right+click" /></p>
        </div>
        <div area="Video content" id="videoContent">
            <h2>You can use the tags="embed" attribute to create an area that will prompt someone to embed a snippet (eg. video or form)</h2>
            <p>This makes the task of getting someone to embed a video much simpler than expecting them to embed an object in an openly editable area</p>
            <div editable="true" tags="embed">Click here to embed a video</div>
        </div>
    </body>
</html>

Step 6: Area scoping

Create 2 files, then create 3 pages, 1 using the home.html template and 2 using the about.html template.

home.html

<html>
    <head>
        <title>My Page</title>
    </head>
    <body>
        <div area="Main content" editable="true">
            <h2>This is the home page</h2>
            <p>You can type a bunch of content here, and it will only update on one page.</p>
        </div>
        <div area="Sub content" editable="true" scope="superglobal">
            <h2>This is a superglobal area</h2>
            <p>You can update the content here and any page that uses a template containing an area with the same name will receive the updates</p>
        </div>
    </body>
</html>

about.html

<html>
    <head>
        <title>My Page</title>
    </head>
    <body>
        <div area="Main content" editable="true">
            <h2>This is the about page</h2>
            <p>You can type a bunch of content here and it will only update on one page.</p>
        </div>
        <div area="Sub content" editable="true" scope="superglobal">
            <h2>This is a superglobal area</h2>
            <p>Anything you type here will appear on any other page using a template which contains this area.</p>
        </div>
        <div area="Related content" editable="true" scope="global">
            <h2>This is a global area</h2>
            <p>Anything you type here will appear on any other page using the About page template</p>
        </div>
    </body>
</html>

When you edit the pages and switch between them, you'll see that the content updates on all pages for superglobal areas, and all pages using the same template on global areas.

Step 7: Menus and the menu manager

You can create a nested menu structure using arbitrary HTML on your page using the menu attribute:

<html>
    <head>
        <title>My Page</title>
    </head>
    <body>
        <div id="mainNavigation" menu="Main Navigation">
            <div repeat="10" active-class="main-highlight">
                <p><a href="" characters="20">This is an item</a></p>
                <div repeat="10" active-class="main-sub-highlight">
                    <p><a href="" characters="60">This is a sub menu item</a></p>
                </div>
                <div>
                    <p><a href="">This is a sub menu item</a></p>
                </div>
                <div>
                    <p><a href="">This is a sub menu item</a></p>
                </div>
                <div>
                    <p><a href="">This is a sub menu item</a></p>
                </div>
                <div>
                    <p><a href="">This is a sub menu item</a></p>
                </div>
            </div>
            <div>
                <p><a href="">This is an item</a></p>
                <div>
                    <p><a href="">This is a sub menu item</a></p>
                </div>
            </div>
            <div>
                <p><a href="">This is an item</a></p>
                <div>
                    <p><a href="">This is a sub menu item</a></p>
                </div>
            </div>
            <div>
                <p><a href="">This is an item</a></p>
                <div>
                    <p><a href="">This is a sub menu item</a></p>
                </div>
            </div>
        </div>
        <div area="Main content" editable="true">
            <h2>This is the about page</h2>
            <p>You can type a bunch of content here and it will only update on one page.</p>
        </div>
        <div area="Sub content" editable="true" scope="superglobal">
            <h2>This is a superglobal area</h2>
            <p>Anything you type here will appear on any other page using a template which contains this area.</p>
        </div>
        <div area="Related content" editable="true" scope="global">
            <h2>This is a global area</h2>
            <p>Anything you type here will appear on any other page using the About page template</p>
        </div>
        <ul id="footerNavigation" menu="Footer Navigation">
            <li repeat="6" active-class="footer-menu-highlight" ancestor-class="footer-menu-parent-highlight">
                <a href="" characters="20">This is a menu item</a>
                <ul submenu="Footer sub menu">
                    <li repeat="10" active-class="footer-sub-menu-highlight">
                        <a href="" characters="60">This is a sub menu item</a>
                    </li>
                </ul>
            <li>
            <li>
                <a href="">This is a menu item</a>
                <ul>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                </ul>
            <li>
            <li>
                <a href="">This is a menu item</a>
                <ul>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                </ul>
            <li>
            <li>
                <a href="">This is a menu item</a>
                <ul>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                </ul>
            <li>
            <li>
                <a href="">This is a menu item</a>
                <ul>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                    <li>
                        <a href="">This is a sub menu item</a>
                    </li>
                </ul>
            <li>
        </ul>
    </body>
</html>

Detailed notes about how menus work:

 - Menu content is managed via the Menu Manager rather than directly on the page like other content (this is something we want to change in future)
 - the menu attribute indicates a "top level" menu
 - the submenu attribute indicates a sub menu
 - any node with a "repeat" attribute will become an available "slot" in the menu manager. The repeat attribute ensures that the user is unable to add more than the specified number of items (since this will often break the design of the site). You can have sample content in the page during development. When you deploy the site, Decal will automatically remove any sibling nodes of a node with a repeat attribute. Note that you only need to add the attributes to one of your menu items, the rest are just filler so you can see how the page will look when viewing the HTML statically.
 - The active-class and ancestor-class activate when a node contains an anchor node with an href attribute the same as the URL currently being viewed
 - The characters attribute goes on the node which will have the link set to whatever the user enters via the menu manager. The number of characters indicates the maximum allowed characters during editing. This allows you to prevent someone from breaking the design during editing
 - When a page is set to have Private access, the menu item node which contains a link to that page will be hidden from the site except when someone is logged in (useful for creating a menu item with special administrative functions or linking to instructions for using the CMS
 - Menus are superglobal. The content will update on all pages when it is edited, however you don't necessarily have to use the same menus on all pages (ie. you can have templates with differently named menus that are managed separately)
 
Step 8: Filters

The architecture for creating "plugins" or extensions for Decal CMS is called "Filters".

The concept is very simple but very different from all other content management systems (both hosted and self-hosted).

Decal Filters use a Service Oriented Architecture, meaning that they can be written in any language, and hosted anywhere.

As a simple example, we're going to create a filter which provides a sidebar navigation of recently created pages using the current template, and a list of "related pages" that are tagged the same as the current page. This could be used, for example, to provide a list of "recent posts" on a blog, as well as a list of articles the reader "may also like".

Firstly, let's create a template for our pages:

<html>
    <head>
        <title>This is a page</title>
    </head>
    <body>
        <h2 area="Post title" editable="true" tags="none">This is the title of the post</h2>
        <div area="Body content" editable="true">
            <p>Type the content of your post here</p>
        </div>
        <ul id="recommendedPosts">
            <li id="header">If you liked this post, you might also like ... </li>
            <li>A list of related</li>
            <li>Posts will appear here</li>
            <li>Automatically</li>
        </ul>
        <ul id="recentPosts">
            <li>This will</li>
            <li>Be a list of recent</li>
            <li>posts that will populate</li>
            <li>automatically</li>
        </ul>
    </body>
</html>

Now create a few pages, and tag them so that posts one and two share at least one tag, and posts two and three share at least one tag, for example:

 - Post 1 tagged with "one,two"
 - Post 2 tagged with "two,three"
 - Post 3 tagged with "three,four"

To setup a filter, first you need to setup somewhere to run/host the code.

INSTRUCTIONS FOR DOING THIS ON HEROKU OR APPFOG FREE TIER WITH PYTHON, RUBY AND PHP AS PASSTHROUGH, EG. die($_POST['data']);

Now that you have a URL to do the filtering, you simply add it to the head of your document:

<html>
    <head>
        <title>This is a page</title>
        <filter url="http://YOUR.URL.COM/" />
    </head>
    <body>
        <h2 area="Post title" editable="true" tags="none">This is the title of the post</h2>
        <div area="Body content" editable="true">
            <p>Type the content of your post here</p>
        </div>
        <ul id="recommendedPosts">
            <li id="header">If you liked this post, you might also like ... </li>
            <li>A list of related</li>
            <li>Posts will appear here</li>
            <li>Automatically</li>
        </ul>
        <ul id="recentPosts">
            <li>This will</li>
            <li>Be a list of recent</li>
            <li>posts that will populate</li>
            <li>automatically</li>
        </ul>
    </body>
</html>

Now when you load the page, the code at that URL will be executed. The first thing to do is make it not execute when you're logged in and editing the page (which makes the page load more quickly).

INSTRUCTIONS FOR DOING THIS IN PHP, RUBY, PYTHON

You can now write code to populate the the list of recent and recommended posts.

INSTRUCTIONS FOR DOING THIS IN PHP, RUBY, PYTHON USING THE API

The responses are all cached, which can be enabled/disabled in the Decal Manager. You can also enable/disable app widgets in the Decal Manager to prevent them from being loaded.
